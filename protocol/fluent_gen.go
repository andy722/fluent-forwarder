package protocol

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *FluentMsg) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	err = z.Tag.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Tag")
		return
	}
	z.Time, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "Time")
		return
	}
	var field []byte
	_ = field
	var zb0002 uint32
	zb0002, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	for zb0002 > 0 {
		zb0002--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err, "Record")
			return
		}
		switch msgp.UnsafeString(field) {
		case "container_name":
			err = z.Record.ContainerName.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Record", "ContainerName")
				return
			}
		case "log":
			err = z.Record.Log.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Record", "Log")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err, "Record")
				return
			}
		}
	}
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "Option")
		return
	}
	if z.Option == nil {
		z.Option = make(map[string]interface{}, zb0003)
	} else if len(z.Option) > 0 {
		for key := range z.Option {
			delete(z.Option, key)
		}
	}
	for zb0003 > 0 {
		zb0003--
		var za0001 string
		var za0002 interface{}
		za0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "Option")
			return
		}
		za0002, err = dc.ReadIntf()
		if err != nil {
			err = msgp.WrapError(err, "Option", za0001)
			return
		}
		z.Option[za0001] = za0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *FluentMsg) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	err = z.Tag.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Tag")
		return
	}
	err = en.WriteInt64(z.Time)
	if err != nil {
		err = msgp.WrapError(err, "Time")
		return
	}
	// map header, size 2
	// write "container_name"
	err = en.Append(0x82, 0xae, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = z.Record.ContainerName.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Record", "ContainerName")
		return
	}
	// write "log"
	err = en.Append(0xa3, 0x6c, 0x6f, 0x67)
	if err != nil {
		return
	}
	err = z.Record.Log.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Record", "Log")
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Option)))
	if err != nil {
		err = msgp.WrapError(err, "Option")
		return
	}
	for za0001, za0002 := range z.Option {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Option")
			return
		}
		err = en.WriteIntf(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Option", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *FluentMsg) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	o, err = z.Tag.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Tag")
		return
	}
	o = msgp.AppendInt64(o, z.Time)
	// map header, size 2
	// string "container_name"
	o = append(o, 0x82, 0xae, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	o, err = z.Record.ContainerName.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Record", "ContainerName")
		return
	}
	// string "log"
	o = append(o, 0xa3, 0x6c, 0x6f, 0x67)
	o, err = z.Record.Log.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Record", "Log")
		return
	}
	o = msgp.AppendMapHeader(o, uint32(len(z.Option)))
	for za0001, za0002 := range z.Option {
		o = msgp.AppendString(o, za0001)
		o, err = msgp.AppendIntf(o, za0002)
		if err != nil {
			err = msgp.WrapError(err, "Option", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FluentMsg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	bts, err = z.Tag.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Tag")
		return
	}
	z.Time, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Time")
		return
	}
	var field []byte
	_ = field
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	for zb0002 > 0 {
		zb0002--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err, "Record")
			return
		}
		switch msgp.UnsafeString(field) {
		case "container_name":
			bts, err = z.Record.ContainerName.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Record", "ContainerName")
				return
			}
		case "log":
			bts, err = z.Record.Log.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Record", "Log")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err, "Record")
				return
			}
		}
	}
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Option")
		return
	}
	if z.Option == nil {
		z.Option = make(map[string]interface{}, zb0003)
	} else if len(z.Option) > 0 {
		for key := range z.Option {
			delete(z.Option, key)
		}
	}
	for zb0003 > 0 {
		var za0001 string
		var za0002 interface{}
		zb0003--
		za0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Option")
			return
		}
		za0002, bts, err = msgp.ReadIntfBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Option", za0001)
			return
		}
		z.Option[za0001] = za0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *FluentMsg) Msgsize() (s int) {
	s = 1 + z.Tag.Msgsize() + msgp.Int64Size + 1 + 15 + z.Record.ContainerName.Msgsize() + 4 + z.Record.Log.Msgsize() + msgp.MapHeaderSize
	if z.Option != nil {
		for za0001, za0002 := range z.Option {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.GuessSize(za0002)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *FluentRawMsg) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	err = z.Tag.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Tag")
		return
	}
	err = z.Time.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Time")
		return
	}
	err = z.Record.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	err = z.Option.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Option")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *FluentRawMsg) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	err = z.Tag.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Tag")
		return
	}
	err = z.Time.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Time")
		return
	}
	err = z.Record.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	err = z.Option.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Option")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *FluentRawMsg) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	o, err = z.Tag.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Tag")
		return
	}
	o, err = z.Time.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Time")
		return
	}
	o, err = z.Record.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	o, err = z.Option.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Option")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FluentRawMsg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	bts, err = z.Tag.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Tag")
		return
	}
	bts, err = z.Time.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Time")
		return
	}
	bts, err = z.Record.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	bts, err = z.Option.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Option")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *FluentRawMsg) Msgsize() (s int) {
	s = 1 + z.Tag.Msgsize() + z.Time.Msgsize() + z.Record.Msgsize() + z.Option.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *FluentRecord) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "container_name":
			err = z.ContainerName.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ContainerName")
				return
			}
		case "log":
			err = z.Log.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Log")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *FluentRecord) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "container_name"
	err = en.Append(0x82, 0xae, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = z.ContainerName.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ContainerName")
		return
	}
	// write "log"
	err = en.Append(0xa3, 0x6c, 0x6f, 0x67)
	if err != nil {
		return
	}
	err = z.Log.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Log")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *FluentRecord) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "container_name"
	o = append(o, 0x82, 0xae, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	o, err = z.ContainerName.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ContainerName")
		return
	}
	// string "log"
	o = append(o, 0xa3, 0x6c, 0x6f, 0x67)
	o, err = z.Log.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Log")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FluentRecord) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "container_name":
			bts, err = z.ContainerName.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ContainerName")
				return
			}
		case "log":
			bts, err = z.Log.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Log")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *FluentRecord) Msgsize() (s int) {
	s = 1 + 15 + z.ContainerName.Msgsize() + 4 + z.Log.Msgsize()
	return
}
